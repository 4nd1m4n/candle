table.table.table-borderless.month_view
  thead
    colgroup span="7"
    tr
      th colspan="7" scope="colgroup" = l((calendar_month.view_dates.select{ |date| date.day == 14 }).first, format: '%B %Y')
    tr
      - calendar_month.weekday_dates.each do |date|
        th.weekday_name_header scope="col" = l(date, format: '%A')

  tbody
    - Candl::MonthModel.weeks_in_months_view_dates(calendar_month.view_dates).times do |row|
      tr.day_row
        - 7.times do |column|
          - current_day = calendar_month.view_dates[7 * row + column]
          td class=Candl::MonthModel.emphasize_date(current_day, calendar_month.today_date, 'bg-info', 'bg-default')
            - if current_day.day == 1
              .day_head = current_day.day.to_s + '. ' + l(current_day, format: '%b.')
            - else
              .day_head = current_day.day.to_s

      - weekly_multiday_event_heap = calendar_month.grouped_multiday_events[row]
      - unless weekly_multiday_event_heap.empty?
        tr.multi_day_events
          - column = 0
          - while column < 7 do
            - current_day = calendar_month.view_dates[7 * row + column]
            - current_event = Candl::MonthModel.find_best_fit_for_day(calendar_month.view_dates[7 * row], current_day, weekly_multiday_event_heap)

            - if current_event
              - weekly_multiday_event_heap.delete_if{ |event| event.uid == current_event.uid }

              - current_event_length_within_current_week = [(calendar_month.view_dates[7 * row + 6] + 1.day), current_event.dtend].min.to_date - current_day.to_date

              - column += current_event_length_within_current_week - 1
              - is_past = current_event.dtend.to_date < calendar_month.today_date

              - if current_event_length_within_current_week > 0
                td.small_padding colspan=current_event_length_within_current_week
                  .multiday_event.onclick_open_backdrop class=[('past' if is_past), Candl::MonthModel.multiday_event_cutoff({ start: current_event.dtstart < current_day, end: current_event.dtend > (calendar_month.view_dates[7 * row + 6] + 1.day) }, { start: 'multiday_event_leftcut', both: 'multiday_event_bothcut', end: 'multiday_event_rightcut' })]
                    .snowflake_popover data-toggle="popover" data-container="body" type="button" data-html="true" href="#"

                      div
                        span.summary.breakable{ title = Candl::MonthModel.summary_title(current_event) } == current_event.summary.truncate(calendar_month.summary_teaser_length.to_i, seperator: ' ')

                      .popover_content.hide
                        .close_span
                          .close title='Schließen'
                            i.material-icons close

                        .summary title='Zusammenfassung'
                          .text
                            i.material-icons.icon_spacing subject
                            .breakable = current_event.summary
                        hr

                        .from_to title='Zeitraum'
                          .text
                            i.material-icons.icon_spacing date_range
                            = l(current_event.dtstart, format: :short) + " - " + l((current_event.dtend - 1.day), format: :short)
                        hr

                        - if current_event.location.present?
                          .location title='Adresse'
                            .text
                              i.material-icons.icon_spacing location_on
                              a href=calendar_month.address_to_maps_path(current_event.location) target='_blank'
                                .flex_wrap_it.breakable = current_event.location
                          hr

                        - if current_event.description.present?
                          .description title='Weitere Beschreibung'
                            .text
                              i.material-icons.icon_spacing description
                              .flex_wrap_it.breakable = auto_link(current_event.description, html: { target: '_blank' })
            - else
              - current_day = calendar_month.view_dates[7 * row + column]
              td class=Candl::MonthModel.emphasize_date(current_day, calendar_month.today_date, 'bg-info', 'bg-default')

            - column += 1

      tr.events_row
        - 7.times do |column|
          - current_day = calendar_month.view_dates[7 * row + column]
          td class=Candl::MonthModel.emphasize_date(current_day, calendar_month.today_date, 'bg-info', 'bg-default')

            - if calendar_month.grouped_events[current_day]
              - calendar_month.grouped_events[current_day].sort_by{ |event| event.dtstart.localtime }.each do |event|
                - is_past = event.dtend.localtime < calendar_month.today_date
                - placement = column < 2 ? 'right' : 'left'
                .event.onclick_open_backdrop class=('past' if is_past)
                  .snowflake_popover data-toggle="popover" data-placement=placement data-container="body" type="button" data-html="true" href="#"

                    div
                      span.time = event.dtstart.localtime.strftime('%k:%M')
                      span.summary.breakable{ title = Candl::MonthModel.summary_title(event) } == event.summary.truncate(calendar_month.summary_teaser_length.to_i, seperator: ' ')

                    .popover_content.hide
                      .close_span
                        .close title='Schließen'
                          i.material-icons close

                      .summary title='Zusammenfassung'
                        .text
                          i.material-icons.icon_spacing subject
                          .breakable = event.summary
                      hr

                      .from_to title='Zeitraum'
                        .text
                          i.material-icons.icon_spacing date_range
                          = l(event.dtstart.localtime, format: :short) + " - " + l(event.dtend.localtime, format: :hnh_short)

                      - if event.location.present?
                        hr
                        .location title='Adresse'
                          .text
                            .icon_spacing
                              i.material-icons location_on
                            a href=calendar_month.address_to_maps_path(event.location) target='_blank'
                              .flex_wrap_it.breakable = event.location

                      - if event.description.present?
                        hr
                        .description title='Weitere Beschreibung'
                          .text
                            i.material-icons.icon_spacing description
                            .flex_wrap_it.breakable = auto_link(event.description, html: { target: '_blank' })
